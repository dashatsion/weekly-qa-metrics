#!/usr/bin/env python3
import os
import requests
from datetime import datetime, timedelta
import pytz
from statistics import median

class QAMetricsCollector:
    def __init__(self):
        self.jira_email = os.environ['JIRA_EMAIL']
        self.jira_token = os.environ['JIRA_API_TOKEN']
        self.jira_url = os.environ['JIRA_BASE_URL'].rstrip('/')
        self.slack_webhook = os.environ['SLACK_WEBHOOK_URL']
        
        self.session = requests.Session()
        self.session.auth = (self.jira_email, self.jira_token)
        self.session.headers.update({
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        })
        
        self.projects = ['GS2', 'GS1', 'PS2', 'GS5', 'RD1', 'GS3']
    
    def search_issues(self, jql, max_results=1000):
        """–ü–æ—à—É–∫ issues —á–µ—Ä–µ–∑ REST API"""
        url = f"{self.jira_url}/rest/api/2/search"
        
        params = {
            'jql': jql,
            'maxResults': max_results,
            'expand': 'changelog',
            'fields': 'created,status'
        }
        
        print(f"–ó–∞–ø–∏—Ç –¥–æ: {url}")
        print(f"JQL: {jql}")
        
        response = self.session.get(url, params=params, timeout=60)
        print(f"–°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.status_code}")
        
        response.raise_for_status()
        data = response.json()
        
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ issues: {len(data['issues'])}")
        return data['issues']
    
    def get_date_range(self):
        """–û—Ç—Ä–∏–º—É—î –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        kyiv_tz = pytz.timezone('Europe/Kiev')
        now = datetime.now(kyiv_tz)
        
        # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        start_date = now - timedelta(days=7)
        end_date = now
        
        return start_date, end_date
    
    def get_ready_for_qa_metrics(self, project, start_date, end_date):
        """–û—Ç—Ä–∏–º—É—î –º–µ—Ç—Ä–∏–∫–∏ Ready For QA –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É –∑–∞ –ø–µ—Ä—ñ–æ–¥"""
        
        print(f"\n=== –û–±—Ä–æ–±–ª—è—é –ø—Ä–æ–µ–∫—Ç {project} ===")
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø–æ–¥–∏–≤–∏–º–æ—Å—è —è–∫—ñ issues –≤–∑–∞–≥–∞–ª—ñ —î
        jql_all = f'project = {project} AND created >= "{start_date.strftime("%Y-%m-%d")}"'
        
        try:
            all_issues = self.search_issues(jql_all, max_results=50)
            
            print(f"–í—Å—å–æ–≥–æ issues –≤ {project} –∑–∞ –ø–µ—Ä—ñ–æ–¥: {len(all_issues)}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å–∏
            if all_issues:
                print("–°—Ç–∞—Ç—É—Å–∏ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö issues:")
                for issue in all_issues[:10]:  # –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
                    status = issue['fields']['status']['name']
                    print(f"  {issue['key']}: {status}")
            
            # –¢–µ–ø–µ—Ä —à—É–∫–∞—î–º–æ –∑ —Ç–æ—á–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –∑ –≤–∞—à–æ—ó Jira
            jql_qa = f'project = {project} AND status = "Ready For QA"'
            qa_issues = self.search_issues(jql_qa, max_results=50)
            
            if qa_issues:
                print(f"Issues –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'Ready For QA': {len(qa_issues)}")
                for issue in qa_issues:
                    print(f"  - {issue['key']}")
            else:
                print("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ issues –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'Ready For QA'")
                
                # –°–ø—Ä–æ–±—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
                variants = ["Ready for QA", "READY FOR QA", "Ready for Testing"]
                for variant in variants:
                    jql_variant = f'project = {project} AND status = "{variant}"'
                    try:
                        variant_issues = self.search_issues(jql_variant, max_results=10)
                        if variant_issues:
                            print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(variant_issues)} issues –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '{variant}'")
                            break
                    except:
                        continue
            
            return "0h 0m"  # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 0, –ø–æ–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
                
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–µ—Ç—Ä–∏–∫ –¥–ª—è {project}: {e}")
            return "N/A"
    
    def format_time(self, hours):
        """–§–æ—Ä–º–∞—Ç—É—î —á–∞—Å —É –≥–æ–¥–∏–Ω–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç 'Xh Ym'"""
        total_hours = int(hours)
        minutes = int((hours - total_hours) * 60)
        return f"{total_hours}h {minutes}m"
    
    def collect_all_metrics(self):
        """–ó–±–∏—Ä–∞—î –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤"""
        start_date, end_date = self.get_date_range()
        
        print(f"–ó–±–∏—Ä–∞—é –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥: {start_date.strftime('%Y-%m-%d %H:%M')} - {end_date.strftime('%Y-%m-%d %H:%M')}")
        
        metrics = {}
        for project in self.projects:
            metrics[project] = self.get_ready_for_qa_metrics(project, start_date, end_date)
        
        return metrics, start_date, end_date
    
    def format_slack_message(self, metrics, start_date, end_date):
        """–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Slack"""
        message = f"*Control Chart, median time {start_date.strftime('%b %d')}- {end_date.strftime('%b %d')} –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º (—Ç–µ—Å—Ç)*\n\n"
        
        for project in self.projects:
            message += f"{project} - {metrics[project]}\n"
        
        return message.strip()
    
    def send_to_slack(self, message):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Slack"""
        payload = {
            "channel": "#control-chart",
            "text": message,
            "username": "QA Metrics Bot",
            "icon_emoji": ":chart_with_upwards_trend:"
        }
        
        try:
            response = requests.post(self.slack_webhook, json=payload, timeout=30)
            if response.status_code == 200:
                print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤ Slack!")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Slack: {response.status_code} - {response.text}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫—É –∑–±–æ—Ä—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∑–±–æ—Ä—É QA –º–µ—Ç—Ä–∏–∫...")
        
        try:
            metrics, start_date, end_date = self.collect_all_metrics()
            message = self.format_slack_message(metrics, start_date, end_date)
            
            print("\nüìä –ó—ñ–±—Ä–∞–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏:")
            print(message)
            print("\nüì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤ Slack...")
            
            self.send_to_slack(message)
            
        except Exception as e:
            error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–∏—Ä–∞–Ω–Ω—ñ –º–µ—Ç—Ä–∏–∫: {e}"
            print(error_message)

if __name__ == "__main__":
    collector = QAMetricsCollector()
    collector.run()
